from django.db import models
from .validators import validate_file_size
from django.core.exceptions import ValidationError


# üìå –ñ–∞–Ω—Ä (–æ–±—ã—á–Ω—ã–π –∏–ª–∏ —Å–ø–µ—Ü)
class Genre(models.Model):
    GENRE_KIND_CHOICES = [
        ("default", "–û–±—ã—á–Ω—ã–π –∂–∞–Ω—Ä"),
        ("special", "–°–ø–µ—Ü–∂–∞–Ω—Ä (—Å –≥—Ä—É–ø–ø–∞–º–∏)"),
    ]

    title = models.CharField(max_length=100)
    kind = models.CharField(
        max_length=20, choices=GENRE_KIND_CHOICES, default="default"
    )

    def __str__(self):
        return f"{self.title} [{self.kind}]"


# üìå –ì—Ä—É–ø–ø—ã –≤–Ω—É—Ç—Ä–∏ —Å–ø–µ—Ü–∂–∞–Ω—Ä–∞
class Group(models.Model):
    genre = models.ForeignKey(Genre, on_delete=models.CASCADE, related_name="groups")
    title = models.CharField(max_length=150)

    # ‚úÖ –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥—Ä—É–ø–ø—ã –∏ –∞–¥–º–∏–Ω–∫–∏
    description = models.TextField(blank=True, help_text="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã")
    expert = models.CharField(max_length=255, blank=True, help_text="–ò–º—è —ç–∫—Å–ø–µ—Ä—Ç–∞")
    cover = models.ImageField(
        upload_to="group_covers/",
        blank=True,
        null=True,
        validators=[validate_file_size],
        help_text="–û–±–ª–æ–∂–∫–∞ –≥—Ä—É–ø–ø—ã (–¥–æ 2 –ú–ë)",
    )

    class Meta:
        verbose_name = "–ì—Ä—É–ø–ø–∞"
        verbose_name_plural = "–ì—Ä—É–ø–ø—ã"

    def __str__(self):
        return f"{self.title} (Group of {self.genre.title})"


# üìå –ö–æ–Ω—Ç–µ–Ω—Ç (—Å –ø—Ä–∏–≤—è–∑–∫–æ–π –ª–∏–±–æ –∫ –∂–∞–Ω—Ä—É, –ª–∏–±–æ –∫ –≥—Ä—É–ø–ø–µ)
class ContentItem(models.Model):
    CONTENT_TYPE_CHOICES = [
        ("video", "üé• –í–∏–¥–µ–æ"),
        ("audio", "üéß –ê—É–¥–∏–æ"),
        ("file", "üìÑ –§–∞–π–ª"),
    ]

    genre = models.ForeignKey(
        Genre, on_delete=models.CASCADE, related_name="items", null=True, blank=True
    )
    group = models.ForeignKey(
        Group, on_delete=models.CASCADE, related_name="items", null=True, blank=True
    )

    title = models.CharField(max_length=200)
    subtitle = models.TextField(blank=True, null=True, help_text="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
    content_type = models.CharField(max_length=10, choices=CONTENT_TYPE_CHOICES)
    telegram_url = models.URLField(help_text="–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram")
    duration = models.CharField(max_length=20, help_text="–ù–∞–ø—Ä–∏–º–µ—Ä: 00:00:45")
    thumbnail = models.ImageField(
        upload_to="thumbnails/",
        blank=True,
        null=True,
        validators=[validate_file_size],
        help_text="–¢–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–µ–æ. –ú–∞–∫—Å. 2 –ú–ë",
    )

    def __str__(self):
        return f"{self.title} ({self.content_type})"

    def clean(self):
        # –ó–∞–ø—Ä–µ—â–∞–µ–º —É–∫–∞–∑—ã–≤–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ genre –∏ group
        if self.genre and self.group:
            raise ValidationError(
                {"group": "–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–ª—å–∑—è –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å—Ä–∞–∑—É –∏ –∫ –∂–∞–Ω—Ä—É, –∏ –∫ –≥—Ä—É–ø–ø–µ"}
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –∂–∞–Ω—Ä–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã
        qs = ContentItem.objects.filter(title__iexact=self.title)
        if self.genre:
            qs = qs.filter(genre=self.genre)
        if self.group:
            qs = qs.filter(group=self.group)
        if self.pk:
            qs = qs.exclude(pk=self.pk)
        if qs.exists():
            raise ValidationError(
                {"title": "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —É–∂–µ –µ—Å—Ç—å –±–ª–æ–∫ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º"}
            )


# üìå –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
class Favourite(models.Model):
    telegram_id = models.CharField(max_length=20)
    content_item = models.ForeignKey(ContentItem, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ("telegram_id", "content_item")

    def __str__(self):
        return f"{self.telegram_id} ‚ô• {self.content_item.title}"


# üìå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserProfile(models.Model):
    username = models.CharField(max_length=100)
    name = models.CharField(max_length=100)
    phone = models.CharField(max_length=20)
    subscription_status = models.BooleanField(default=False)
    city = models.CharField(max_length=100)
    subscription_until = models.DateField(null=True, blank=True)

    def __str__(self):
        return f"{self.username} ({self.name})"


# üìå –ù–æ–≤–æ—Å—Ç–∏ (What's new)
class NewsItem(models.Model):
    title = models.CharField("–ó–∞–≥–æ–ª–æ–≤–æ–∫", max_length=200, blank=True)
    image = models.ImageField("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", upload_to="news/")
    url = models.URLField("–°—Å—ã–ª–∫–∞", blank=True)
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω–æ", default=True)
    order = models.PositiveIntegerField(
        "–ü–æ—Ä—è–¥–æ–∫", default=0, help_text="–ú–µ–Ω—å—à–µ ‚Äî –≤—ã—à–µ –≤ —Å–ø–∏—Å–∫–µ"
    )
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)

    class Meta:
        ordering = ["order", "-created_at"]
        verbose_name = "–ù–æ–≤–æ—Å—Ç—å (What's new)"
        verbose_name_plural = "–ù–æ–≤–æ—Å—Ç–∏ (What's new)"

    def __str__(self):
        return self.title or f"News #{self.pk}"
