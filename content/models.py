from django.db import models
from .validators import validate_file_size  # ‚úÖ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑–º–µ—Ä thumbnail
from django.core.exceptions import ValidationError


# üìå –ú–æ–¥–µ–ª—å –∂–∞–Ω—Ä–∞
class Genre(models.Model):
    title = models.CharField(max_length=100)

    def __str__(self):
        return self.title


# üìå –ú–æ–¥–µ–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
class ContentItem(models.Model):
    GENRE_TYPE_CHOICES = [
        ('video', 'üé• –í–∏–¥–µ–æ'),
        ('audio', 'üéß –ê—É–¥–∏–æ'),
        ('file', 'üìÑ –§–∞–π–ª'),
    ]

    genre = models.ForeignKey(Genre, on_delete=models.CASCADE, related_name='items')
    title = models.CharField(max_length=200)
    subtitle = models.TextField(blank=True, null=True, help_text="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    content_type = models.CharField(max_length=10, choices=GENRE_TYPE_CHOICES)
    telegram_url = models.URLField(help_text="–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram")
    duration = models.CharField(max_length=20, help_text="–ù–∞–ø—Ä–∏–º–µ—Ä: 00:00:45")
    thumbnail = models.ImageField(
        upload_to='thumbnails/',
        blank=True,
        null=True,
        validators=[validate_file_size],
        help_text="–¢–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–µ–æ. –ú–∞–∫—Å. 2 –ú–ë"
    )

    def __str__(self):
        return f"{self.title} ({self.content_type})"

    def clean(self):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ title –≤–Ω—É—Ç—Ä–∏ –∂–∞–Ω—Ä–∞ (–∫–µ–π—Å insensitive!)
        qs = ContentItem.objects.filter(genre=self.genre, title__iexact=self.title)
        if self.pk:
            qs = qs.exclude(pk=self.pk)
        if qs.exists():
            raise ValidationError({'title': "–í –¥–∞–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —É–∂–µ –µ—Å—Ç—å –±–ª–æ–∫ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º"})



# üìå –ú–æ–¥–µ–ª—å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (–¥–ª—è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
class Favourite(models.Model):
    telegram_id = models.CharField(max_length=20)  # ID –∏–ª–∏ username Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    content_item = models.ForeignKey(ContentItem, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ('telegram_id', 'content_item')

    def __str__(self):
        return f"{self.telegram_id} ‚ô• {self.content_item.title}"


# üìå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –º–æ–¥–µ–ª—å (UserProfile)
class UserProfile(models.Model):
    username = models.CharField(max_length=100)  # Telegram username –∏–ª–∏ ID
    name = models.CharField(max_length=100)
    phone = models.CharField(max_length=20)
    subscription_status = models.BooleanField(default=False)
    city = models.CharField(max_length=100)
    subscription_until = models.DateField(null=True, blank=True)

    def __str__(self):
        return f"{self.username} ({self.name})"
